// This is your Prisma schema file,
// learn more about it in the docs: https/pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  clerkId                 String   @unique
  fullName                String?
  birthDate               DateTime?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  points                  Int      @default(0)
  onboardingData          Json?
  systemPrompt            String?
  selectedAgent           AgentType @default(HYBRID)

  mentorId                String?
  menteeId                String?
  mentor                  User?    @relation("Mentorship", fields: [mentorId], references: [id], onDelete: SetNull)
  mentee                  User?    @relation("Mentorship", fields: [menteeId], references: [id], onDelete: SetNull)

  numerologyMap           NumerologyMap?
  conversations           Conversation[]
  insights                Insight[]
  posts                   Post[]
  replies                 Reply[]
  badges                  UserBadge[]
  sentMessages            PrivateMessage[] @relation("sentMessages")
  receivedMessages        PrivateMessage[] @relation("receivedMessages")
  privateConversations    PrivateConversation[] @relation(references: [id])
  @@map("users")
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  icon        String
  users       UserBadge[]
  @@map("badges")
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  badgeId    String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  @@unique([userId, badgeId])
  @@map("user_badges")
}

model NumerologyMap {
  id           String   @id @default(cuid())
  userId       String   @unique
  motivacao    Int
  impressao    Int
  expressao    Int
  destino      Int
  calculatedAt DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("numerology_maps")
}

// AI CONVERSATION MODELS
model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  @@map("messages")
}

// USER-TO-USER MESSAGING MODELS
model PrivateConversation {
    id          String @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    participants User[] @relation(references: [id])
    messages    PrivateMessage[]
    @@map("private_conversations")
}

model PrivateMessage {
    id              String   @id @default(cuid())
    content         String
    createdAt       DateTime @default(now())
    senderId        String
    recipientId     String
    conversationId  String
    sender          User     @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
    recipient       User     @relation("receivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
    conversation    PrivateConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    @@map("private_messages")
}


model Insight {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  category    String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("insights")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies   Reply[]
  @@map("posts")
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("replies")
}

enum AgentType {
  ESOTERICO
  PSICOLOGICO
  HYBRID
}

enum MessageRole {
  USER
  ASSISTANT
}
